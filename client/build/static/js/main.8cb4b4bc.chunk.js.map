{"version":3,"sources":["components/Nav/index.js","components/ContactForm/SubmitButton/index.js","components/ContactForm/Form/index.js","components/ContactForm/FormContainer/index.js","components/Calendar/Body/index.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","role","aria-label","href","aria-expanded","data-target","aria-hidden","id","class","SubmitButton","props","type","Form","state","from_name","subject","from_email","message","sendEmail","event","preventDefault","template_params","emailjs","send","setState","handleInputChange","target","name","value","init","this","initEmail","for","onChange","onClick","React","Component","FormContainer","moment","locale","localizer","momentLocalizer","myEventsList","CalendarContainer","cal_events","self","axios","get","then","response","appointments","data","i","length","start","utc","toDate","end","catch","error","console","log","events","startAccessor","endAccessor","style","height","width","Home","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8cb4b4bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport 'bulma/css/bulma.css'\r\n\r\nfunction Navbar() {\r\n    return(\r\n    <div>\r\n        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n            <div className=\"navbar-brand\">\r\n                <a className=\"navbar-item\" href=\"#\">\r\n                    <strong><p>Skyline Studios</p></strong>\r\n                    {/* <img src=\"\" width=\"112\" height=\"28\"></img> */}\r\n                </a>\r\n\r\n                <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n                    <span aria-hidden=\"true\"></span>\r\n                    <span aria-hidden=\"true\"></span>\r\n                    <span aria-hidden=\"true\"></span>\r\n                </a>\r\n            </div>\r\n\r\n            <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n                <div className=\"navbar-start\">\r\n                    <a className=\"navbar-item\">\r\n                        Home\r\n                    </a>\r\n\r\n                    <a className=\"navbar-item\">\r\n                        Studio\r\n                    </a>\r\n                    <a className=\"navbar-item\">\r\n                        Lessons\r\n                    </a>\r\n\r\n                <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                    <a className=\"navbar-link\">\r\n                        Contact\r\n                    </a>\r\n\r\n                        <div className=\"navbar-dropdown\">\r\n                            <a className=\"navbar-item\">\r\n                                About\r\n          </a>\r\n                            <a className=\"navbar-item\">\r\n                                Jobs\r\n          </a>\r\n                            <a className=\"navbar-item\">\r\n                                Contact\r\n          </a>\r\n                            <hr className=\"navbar-divider\"></hr>\r\n                                <a className=\"navbar-item\">\r\n                                    Report an issue\r\n          </a>\r\n        </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"navbar-end\">\r\n                        <div className=\"navbar-item\">\r\n                            <div className=\"buttons\">\r\n                                <a className=\"button is-link\">\r\n                                    <strong>Sign up</strong>\r\n                                </a>\r\n                                <a className=\"button is-light\">\r\n                                    Log in\r\n          </a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n           \r\n        </nav>\r\n\r\n\r\n        <section class=\"hero is-link is-fullheight-with-navbar has-background-black\">\r\n  <div className=\"hero-body\">\r\n    <div className=\"container\">\r\n        {/* <img src=\"https://images.squarespace-cdn.com/content/v1/50187db624acce5741aad553/1504285359881-EALV96CVEPU3HQ6LB2QD/ke17ZwdGBToddI8pDm48kKKBYw7RkZ4eykKqfKUvHod7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z5QPOohDIaIeljMHgDF5CVlOqpeNLcJ80NK65_fV7S1Ud9Ke1lvTF9Z4NYnQC_mTW5zDYQ53IbTNfUUbEMZUmRiJvwGh1qtNWvMhYKnvaKhbA/DSC01039.png\"></img> */}\r\n      <p className=\"title\" >\r\n        Skyline Studios\r\n      </p>\r\n    </div>\r\n  </div>\r\n</section>\r\n    </div>)\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction SubmitButton(props) {\r\n  return(\r\n    <button {...props} type=\"submit\" id=\"contact-submit-btn\" className=\"submit-btn\">Send</button>\r\n  )\r\n}\r\n\r\nexport default SubmitButton;","import React from \"react\";\r\nimport SubmitButton from \"../SubmitButton\";\r\nimport emailjs from \"emailjs-com\";\r\nimport \"./style.css\";\r\n\r\nclass Form extends React.Component {\r\n\r\n  state = {\r\n    from_name: \"\",\r\n    subject: \"\",\r\n    from_email: \"\",\r\n    message: \"\"\r\n  }\r\n\r\n  initEmail() {\r\n    emailjs.init(\"user_6679HJHKrxqEfvXSqt7L6\");\r\n  }\r\n\r\n  sendEmail = event => {\r\n    event.preventDefault()\r\n    var template_params = {\r\n      \"from_name\": this.state.from_name,\r\n      \"from_email\": this.state.from_email,\r\n      \"subject\": this.state.subject,\r\n      \"message\": this.state.message\r\n    }\r\n\r\n    var service_id = \"default_service\";\r\n    var template_id = \"contact_form\";\r\n    emailjs.send(service_id, template_id, template_params);\r\n\r\n    this.setState({\r\n      from_name: \"\",\r\n      subject: \"\",\r\n      from_email: \"\",\r\n      message: \"\"\r\n    })\r\n  }\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initEmail();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n      <form id=\"contact-form\">\r\n        <label for=\"from_email\">Email:\r\n        <input type=\"email\" id=\"contact-email\" name=\"from_email\" value={this.state.from_email} onChange={this.handleInputChange}>\r\n\r\n          </input>\r\n        </label>\r\n        <label for=\"from_name\">Name:\r\n        <input type=\"text\" id=\"contact-name\" name=\"from_name\" value={this.state.from_name} onChange={this.handleInputChange}>\r\n\r\n          </input>\r\n        </label>\r\n        <label for=\"subject\">Subject:\r\n        <input type=\"text\" id=\"email-subject\" name=\"subject\" value={this.state.subject} onChange={this.handleInputChange}>\r\n\r\n          </input>\r\n        </label>\r\n        <label for=\"message\">Message: \r\n        <textarea id=\"message\" name=\"message\" value={this.state.message} onChange={this.handleInputChange}>\r\n\r\n        </textarea>\r\n        </label>\r\n        <SubmitButton onClick={this.sendEmail} />\r\n      </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport Form from \"../Form\";\r\nimport \"./style.css\";\r\n\r\nfunction FormContainer() {\r\n  return(\r\n    <div className=\"form-container\">\r\n      <h2>Contact SkyLine</h2>\r\n      <Form />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormContainer;","import React from \"react\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport axios from \"axios\";\r\nmoment.locale(\"en-GB\");\r\n\r\nconst localizer = momentLocalizer(moment);\r\nconst myEventsList = [] //empty array for now\r\nclass CalendarContainer extends React.Component{\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      cal_events: [],\r\n    }\r\n}\r\n\r\n  componentDidMount(){\r\n  \r\n    let self = this\r\n    axios.get()\r\n    .then(response => {\r\n    \r\n    let appointments = response.data;\r\n    \r\n    for (let i = 0; i < appointments.length; i++) {\r\n      appointments[i].start =    moment.utc(appointments[i].start).toDate();\r\n      appointments[i].end = moment.utc(appointments[i].end).toDate();\r\n      \r\n    }\r\n    self.setState({\r\n      cal_events:appointments\r\n    })\r\n\r\n  })\r\n  .catch(function (error) {\r\n    console.log(error);\r\n  });\r\n};\r\n   \r\n  \r\n  render(){\r\n    return(\r\n      <Calendar\r\n        localizer={localizer}\r\n        events={myEventsList}\r\n        startAccessor=\"start\"\r\n        endAccessor=\"end\"\r\n        style={{height: 500, width:700}} //style placeholder so calendar will render. Will move to css file. \r\n      />\r\n    )\r\n  }\r\n};\r\n\r\nexport default CalendarContainer;\r\n","import React from \"react\";\r\nimport Navbar from \"../components/Nav\";\r\nimport FormContainer from \"../components/ContactForm/FormContainer\";\r\nimport CalendarContainer from \"../components/Calendar/Body\";\r\n\r\n\r\nfunction Home(){\r\n    return(\r\n    <div>\r\n        <Navbar/>\r\n        <FormContainer/>\r\n        <CalendarContainer/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Home from \"./pages/home\";\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component{\r\n  render() {\r\n  return (\r\n    <Home/>\r\n\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    //     <p>\r\n    //       Edit <code>src/App.js</code> and save to reload.\r\n    //     </p>\r\n    //     <a\r\n    //       className=\"App-link\"\r\n    //       href=\"https://reactjs.org\"\r\n    //       target=\"_blank\"\r\n    //       rel=\"noopener noreferrer\"\r\n    //     >\r\n    //       Learn React\r\n    //     </a>\r\n    //   </header>\r\n    // </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}